simpleArgs: &simple-args
  initialMoney: 10000
  moneyToTransfer: 100
  numberOfAccounts: &number-of-accounts 1000
test:
  name: delete-asset-batch
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the `deleteAssetsFromBatch` API method. Successive rounds
    delete a-priori created assets of larger byte size.
  workers:
    type: local
    number: 10
  rounds:
    - label: delete-asset-batch-1-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 1 UUID that matches an asset
        of size 8000 bytes.
      
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/scenario/simple/transfer.js
        arguments:
          << : *simple-args
          money: 100
    - label: delete-asset-batch-10-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 10 UUIDs that each match an
        asset of size 8000 bytes.
      
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/scenario/simple/transfer.js
        arguments:
          << : *simple-args
          money: 100
    - label: delete-asset-batch-20-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 20 UUIDs that each match an
        asset of size 8000 bytes.
      
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/scenario/simple/transfer.js
        arguments:
          << : *simple-args
          money: 100
    - label: delete-asset-batch-30-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 30 UUIDs that each match an
        asset of size 8000 bytes.
      
      txNumber: 1000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/scenario/simple/transfer.js
        arguments:
          << : *simple-args
          money: 100
    - label: delete-asset-batch-40-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 40 UUIDs that each match an
        asset of size 8000 bytes.
      
      txNumber: 1000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/scenario/simple/transfer.js
        arguments:
          << : *simple-args
          money: 100
    - label: delete-asset-batch-50-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 50 UUIDs that each match an
        asset of size 8000 bytes.
      
      txNumber: 500
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/scenario/simple/transfer.js
        arguments:
          << : *simple-args
          money: 100
    - label: delete-asset-batch-20-8000-fixed-tps
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 20 UUIDs that each match an
        asset of size 8000 bytes at a fixed TPS.
      
      txNumber: 4000
      rateControl:
        type: fixed-rate
        opts:
          tps: 30
      workload:
        module: benchmarks/scenario/simple/transfer.js
        arguments:
          << : *simple-args
          money: 100
monitors:
    transaction:
       - module: prometheus
    resource:
      - module: docker
        options:
          interval: 1
          containers: ['all']
          charting:
          bar:
            metrics: [Memory(avg), CPU%(avg)]
          polar:
            metrics: [all]
      - module: prometheus
        options:
          url: "http://localhost:9090"
          metrics:
              include: []
              queries:
                  - name: Endorse Time (s)
                    query: rate(endorser_propsal_duration_sum{chaincode="marbles:v0"}[1m])/rate(endorser_propsal_duration_count{chaincode="marbles:v0"}[1m])
                    step: 1
                    label: instance
                    statistic: avg
                  - name: Max Memory (MB)
                    query: sum(container_memory_rss{name=~".+"}) by (name)
                    step: 10
                    label: name
                    statistic: max
                    multiplier: 0.000001
          charting:
            polar:
              metrics: [Max Memory (MB)]
            bar:
              metrics: [all]