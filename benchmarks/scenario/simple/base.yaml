simpleArgs: &simple-args
  initialMoney: 10000
  moneyToTransfer: 100
  numberOfAccounts: &number-of-accounts 1000
test:
  name: fixed-asset
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round flexes a single chaincode method, and includes a null-operation to act
    as a performance cost baseline.
  workers:
    type: local
    number: 5
  rounds:
    - label: empty-contract-evaluate
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `nullResponse`, which
        immediately returns a null response. This represents the fastest
        possible round trip time for an evaluateTransaction() method that does
        not touch the world state or perform any action.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: empty-contract-submit
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `nullResponse`, which
        immediately returns a null response. This represents the fastest
        possible round trip time for a submitTransaction() method that does not
        touch the world state or perform any action.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: create-asset-1000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `create`, which performs a
        `putState()` operation on an asset of size 1000 bytes.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: get-asset-evaluate-1000
      description: >-
        Test a evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a `getState()` operation for a passed UUID, retrieving as asset
        of size 1000 bytes.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: get-asset-submit-1000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a `getState()` operation for a passed UUID, retrieving as asset
        of size 1000 bytes. This test includes involvement of the orderer, and
        appending to the ledger.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: rich-query-evaluate-0
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 10 and
        query string that matches no assets in the world state database.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: rich-query-evaluate-1000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 10 and
        query string that matches all assets created by the calling client. Each
        returned asset is of size 1000 bytes.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: rich-query-submit-0
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 10 and
        query string that matches no assets in the world state database. This
        test includes involvement of the orderer, and appending to the ledger.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: rich-query-submit-1000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 10 and
        query string that matches all assets created by the calling client. Each
        returned asset is of size 1000 bytes. This test includes involvement of
        the orderer, and appending to the ledger.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: range-query-evaluate-0
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query that matches no assets in the
        world state database.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: range-query-evaluate-1000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 10
        and a range keys that bound 200 assets created by the calling client.
        Each returned asset is of size 1000 bytes.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: range-query-submit-0
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query that matches no items in the
        world state database. This test includes involvement of the orderer, and
        appending to the ledger.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
    - label: range-query-submit-1000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 10
        and a range keys that bound 200 assets created by the calling client.
        Each returned asset is of size 1000 bytes. This test includes
        involvement of the orderer, and appending to the ledger.
      
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/scenario/simple/query.js
        arguments: *simple-args
monitors:
    transaction:
       - module: prometheus
    resource:
      - module: docker
        options:
          interval: 1
          containers: ['all']
          charting:
          bar:
            metrics: [Memory(avg), CPU%(avg)]
          polar:
            metrics: [all]
      - module: prometheus
        options:
          url: "http://localhost:9090"
          metrics:
              include: []
              queries:
                  - name: Endorse Time (s)
                    query: rate(endorser_propsal_duration_sum{chaincode="marbles:v0"}[1m])/rate(endorser_propsal_duration_count{chaincode="marbles:v0"}[1m])
                    step: 1
                    label: instance
                    statistic: avg
                  - name: Max Memory (MB)
                    query: sum(container_memory_rss{name=~".+"}) by (name)
                    step: 10
                    label: name
                    statistic: max
                    multiplier: 0.000001
          charting:
            polar:
              metrics: [Max Memory (MB)]
            bar:
              metrics: [all]